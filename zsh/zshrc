# -*- shell-script -*-
# vim: sts=4:sw=4

fpath=(~/.my-config/zsh $fpath)
localdir=~/.my-config/zsh

# The following lines were added by compinstall

zstyle ':completion:*' completer _expand _complete _match _approximate
zstyle ':completion:*' completions 1
zstyle ':completion:*' glob 1
zstyle ':completion:*' match-original both
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-/\]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' max-errors 2
zstyle ':completion:*' substitute 1
zstyle ':completion::*:git-{name-rev,add,rm}:*' ignore-line true
zstyle ':completion:*' accept-exact '*(N)'
zstyle :compinstall filename '~/.zshrc'

autoload -Uz compinit
compinit
# End of lines added by compinstall
# Lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
setopt appendhistory extendedglob
unsetopt beep
bindkey -e
# End of lines configured by zsh-newuser-install

osname=`uname`
if [[ "$osname" = "Darwin" ]]; then
    source $localdir/macrc
elif [[ "$osname" = "Linux" ]]; then
    source $localdir/linuxrc
fi

export PATH=$HOME/bin:$HOME/.cargo/bin:$PATH
export EDITOR="vim -gf"
export VISUAL="$EDITOR"

export SHELL=`which zsh`

###
# See if we can use colors.

autoload colors zsh/terminfo
if [[ "$terminfo[colors]" -ge 8 ]]; then
    colors
fi
for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
    eval PR_$color='%{$terminfo[bold]$fg[${(L)color}]%}'
    eval PR_LIGHT_$color='%{$fg[${(L)color}]%}'
    (( count = $count + 1 ))
done
PR_NO_COLOUR="%{$terminfo[sgr0]%}"

typeset -A altchar
set -A altchar ${(s..)terminfo[acsc]}
PR_SET_CHARSET="%{$terminfo[enacs]%}"
PR_SHIFT_IN="%{$terminfo[smacs]%}"
PR_SHIFT_OUT="%{$terminfo[rmacs]%}"
PR_HBAR=${altchar[q]:--}
PR_ULCORNER=${altchar[l]:--}
PR_LLCORNER=${altchar[m]:--}
PR_LRCORNER=${altchar[j]:--}
PR_URCORNER=${altchar[k]:--}

GIT_COLOUR=$PR_GREEN
STG_COLOUR=$PR_YELLOW
HG_COLOUR=$PR_CYAN
BZR_COLOUR=$PR_RED

setopt prompt_subst
VCS_INFO=vcs-info.rkt
which racket &>/dev/null || VCS_INFO=vcs_info.py

function precmd() {
    local termwidth min_prompt_size the_prompt_size max_vcs_width

    (( termwidth = ${COLUMNS} - 1 ))
    min_prompt_size=${#${(%):-- %n %3c -}}
    (( max_vcs_width = $termwidth - $min_prompt_size ))

    local raw_vcs_info decorated_vcs_info
    $VCS_INFO $max_vcs_width | IFS=$'\t' read -r raw_vcs_info decorated_vcs_info
    the_prompt_size=${#${(%):-- %n %3c$raw_vcs_info -}}
    eval _vcs_info_string=\"$decorated_vcs_info\"

    _filler="\${(l.(($termwidth - $the_prompt_size)).. .)}"

    PROMPT='$PR_SET_CHARSET$PR_SHIFT_IN$PR_CYAN$PR_ULCORNER$PR_SHIFT_OUT \
$PR_YELLOW%n $PR_CYAN%3c$PR_SHIFT_IN${(e)_filler}$PR_SHIFT_OUT\
$_vcs_info_string \
$PR_SHIFT_IN$PR_CYAN$PR_URCORNER$PR_SHIFT_OUT\

$PR_SHIFT_IN$PR_CYAN$PR_LLCORNER$PR_SHIFT_OUT \
$PR_YELLOW%% $PR_NO_COLOUR'
    RPROMPT='$PR_SHIFT_IN$PR_CYAN$PR_LRCORNER$PR_NO_COLOUR$PR_SHIFT_OUT'
}

# Configure keys
bindkey "^Z"    accept-and-hold
bindkey " "     magic-space  # also do history expansion on space
bindkey "^[[3~" delete-char
bindkey "^[[A"  up-line-or-search
bindkey "^[[B"  down-line-or-search

## Cygwin Console
# Cygwin Console does not distinguish between [Ctrl]+[<|] and [<|]
# respectively [Ctrl]+[|>] and [|>]
if   [ "$TERM" = cygwin ]
then bindkey "\e[1~" beginning-of-line
     bindkey "\e[4~" end-of-line
fi

umask 022

export LESS='RSFX'
export PAGER='less'

alias cleanbackup="find . -name '.\#*' -or -name '*.moved' -or -name '*~' -exec rm -fr '{}' ';'"

# opam configuration
test -r $HOME/.opam/opam-init/init.zsh && . $HOME/.opam/opam-init/init.zsh > /dev/null 2> /dev/null || true
