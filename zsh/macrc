# -*- shell-script -*-
# vim:ft=zsh

if [[ -d $HOME/Library/Haskell/bin ]]; then
    export PATH=$HOME/Library/Haskell/bin:$PATH
fi

if [[ -d $HOME/Library/Android ]]; then
    export ANDROID_LIB=$HOME/Library/Android
    export PATH=$ANDROID_LIB/sdk/platform-tools:$ANDROID_LIB/sdk/tools:$ANDROID_LIB/ndk:$PATH
fi


# Apparently OS X does not set this one using system language, but region instead.
export LC_ALL=en_GB.UTF-8
export LC_MESSAGES=en_GB.UTF-8

export EMACS_HOME=/Applications/Emacs.app/Contents/MacOS
export EMACS=$EMACS_HOME/Emacs
export EMACSCLIENT=/usr/local/bin/emacsclient

alias oem="open -a /Applications/Emacs.app"
alias em="$EMACS"
alias ecs="$EMACS --daemon"
alias ec="$EMACSCLIENT -a $EMACS"
alias ke="killall `basename $EMACS`"

alias rvim="mvim --remote"

alias ls='ls -G'

# Tell the terminal about the working directory whenever it changes.
if [[ "$TERM_PROGRAM" == "Apple_Terminal" || "$TERM_PROGRAM" == "iTerm.app" ]] \
     && [[ -z "$INSIDE_EMACS" ]]; then

    update_terminal_cwd() {
        # Identify the directory using a "file:" scheme URL, including
        # the host name to disambiguate local vs. remote paths.

        # Percent-encode the pathname.
        local URL_PATH=''
        {
            # Use LANG=C to process text byte-by-byte.
            local i ch hexch LANG=C
            for ((i = 1; i <= ${#PWD}; ++i)); do
                ch="$PWD[i]"
                if [[ "$ch" =~ [/._~A-Za-z0-9-] ]]; then
                    URL_PATH+="$ch"
                else
                    hexch=$(printf "%02X" "'$ch")
                    URL_PATH+="%$hexch"
                fi
            done
        }

        local PWD_URL="file://$HOST$URL_PATH"
        #echo "$PWD_URL"        # testing
        printf '\e]7;%s\a' "$PWD_URL"
        # iTerm will use the above only for semantic help including marker of
        # changed directory. If you want to show something in the tab title,
        # gotta use OSC 0.
        if [[ "$TERM_PROGRAM" == "iTerm.app" ]]; then
          local cwd=`print -P %~`
          printf '\e]0;%s\a' "$cwd:h:t/$cwd:t"
        fi
    }

    # Register the function so it is called whenever the working
    # directory changes.
    autoload add-zsh-hook
    add-zsh-hook chpwd update_terminal_cwd

    # Tell the terminal about the initial directory.
    update_terminal_cwd
fi

# captured with "od -c"
bindkey "^[[5D"  backward-word
bindkey "^[[5C"  forward-word

